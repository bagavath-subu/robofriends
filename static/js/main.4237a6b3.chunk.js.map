{"version":3,"sources":["components/Card.js","components/Search.js","components/Names.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","source","concat","id","react_default","a","createElement","className","src","alt","Search","placeholder","type","Component","Names","App","cards","i","length","push","src_components_Card","style","margin-top","margin-bottom","src_components_Search","searchChange","this","onSearchChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mSAaeA,eAVH,SAACC,GACT,IAAIC,EAAM,wBAAAC,OAAyBF,EAAMG,IAEzC,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAQQ,IAAI,WACtBL,EAAAC,EAAAC,cAAA,SAAIN,EAAMG,OCIRO,0LARP,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MAAMI,YAAY,cAAcC,KAAK,iBAJ7CC,cCHRC,EAAM,CACf,WACA,WACA,SACA,QACA,UACA,KACA,KACA,UACA,UACA,QACA,OAAO,UCkCIC,mLAlBX,IADA,IAAIC,EAAM,GACFC,EAAE,EAAEA,EAAEH,EAAMI,OAAOD,IAC5BD,EAAMG,KAAKf,EAAAC,EAAAC,cAACc,EAAD,CAAMjB,GAAIW,EAAMG,MAE1B,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIe,MAAO,CAACC,aAAa,MAAMC,gBAAgB,QAA/C,iBACFnB,EAAAC,EAAAC,cAACkB,EAAD,CAAQC,aAAcC,KAAKC,iBAC3BvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdS,GAEDZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SAAOK,YAAY,aAAaC,KAAK,OAAOL,UAAU,QACtDH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2DAAlB,gBAjCYM,aCMZe,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,WCzFjEC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,sCAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAAjC,OAAM0D,sCAAN,sBAEPhC,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MCtC/BE","file":"static/js/main.4237a6b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card =(props)=> {\r\n    let source=`https://robohash.org/${props.id}`;\r\n    \r\n    return (\r\n            <div className=\"ma3 ba b--silver navy br2 fl grow\">\r\n             <img src={source} alt=\"broken\"/>\r\n             <p>{props.id}</p>   \r\n            </div>\r\n        )\r\n}\r\nexport default Card;\r\n\r\n","import React, { Component } from 'react'\r\nimport './Search.css'\r\n\r\nclass Search extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchArea bb b--black\">\r\n            <input className=\"br3\" placeholder=\"Search here\" type=\"text\"/>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","export const Names=[\r\n    \"Bagavath\",\r\n    \"Shanmuga\",\r\n    \"Sarvan\",\r\n    \"Sujai\",\r\n    \"Sivaram\",\r\n    \"Yk\",\r\n    \"Vj\",\r\n    \"Surthee\",\r\n    \"Vignesh\",\r\n    \"Shiva\",\r\n    \"thiv\",\"suthan\"\r\n];","import './App.css';\r\nimport Card from './components/Card';\r\nimport Search from './components/Search';\r\nimport {Names} from './components/Names';\r\nimport React, { Component } from 'react';\r\n\r\nclass App extends Component {\r\n\r\n  // constructor() {\r\n  //   super()\r\n  //   this.state = {\r\n  //     robots:Names,\r\n  //     searchfield: ''\r\n  //   };\r\n  // }\r\n  // filteredRobots = this.state.robots.filter(robot =>{\r\n  //   return robot.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n  // })\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchfield: event.target.value })\r\n  // }\r\n\r\n \r\n  \r\n  render() {\r\n    let cards=[];\r\n    for(var i=0;i<Names.length;i++){\r\n   cards.push(<Card id={Names[i]} />);\r\n    }\r\n    return (\r\n      <div>\r\n        <h1 style={{\"margin-top\":\"0px\",\"margin-bottom\":\"0px\"}}>Robot Friends</h1>\r\n      <Search searchChange={this.onSearchChange}/>\r\n      <div className=\"App-header\">\r\n      {cards}\r\n      </div>\r\n      <div className=\"add\">\r\n      <input placeholder=\"Enter Name\" type=\"text\" className=\"br3\"/>\r\n      <button className=\"ma2 mh4 f6 link dim br2 ph3 pv2 mb2 dib white bg-black \">ADD</button>\r\n      </div>\r\n      </div>\r\n  );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}